/*
 * line_fuzzy.ic
 * Nick Rummel, Alex Medellin
 * CSC463-01
 * Fall 2017
 * Source code for Assignment 3
 * Detecting a line with 2 IR sensors
 * utilizing fuzzy logic.
 */

int LEFT_MOTOR = 1;                                         // port for left motor
int RIGHT_MOTOR = 3;                                        // port for right motor
int LEFT_IRSEN = 4;                                         // analog port for left IR sensor
int RIGHT_IRSEN = 3;                   // analog port for right IR sensor
int IR_VALUE = 0;                                           // value to determine if on tape
int range = 0;
int initial_delta = 0;
int l_power = 35;
int r_power = 35;
int default_power = 35;


/*
 * Function to move robot forward
 * with a specific amount of power 
 * for a specific length of time
 */
void forward(float time, int power)
{
    motor(LEFT_MOTOR, power);
    motor(RIGHT_MOTOR, power);
    sleep(time);
}

/*
 * Function to move robot backwards
 * with a specific amount of power 
 * for a specific length of time
 */
void backward(float time, int power)
{
    motor(LEFT_MOTOR, power);
    motor(RIGHT_MOTOR, power);
    sleep(time);
}

/*
 * Function to turn the robot
 * with a specific amount of power
 * going to each motor for a
 * specific length of time
 */
void turn(int right, int left)
{
    l_power = l_power + left;
    r_power = r_power + right;
    motor(RIGHT_MOTOR, r_power);
    motor(LEFT_MOTOR, l_power);
}

/*
 * Function to stop the robot from
 * moving for a specified span of time
 */
void stop(float time)
{
    off(LEFT_MOTOR);
    off(RIGHT_MOTOR);
    sleep(time);
}

/*
 * Method to retrieve the left sensor value
 * from the robot's IR sensor
 * and print the value to the LCD screen.
 */
int getLeftSensorValue()
{
    int value;
    value = analog(LEFT_IRSEN);
    
    printf("L= %d\n", value);
    return value;
}

/*
 * Method to retrieve the right sensor value
 * from the robot's IR sensor
 * and print the value to the LCD screen.
 */
int getRightSensorValue()
{
    int value;
    value = analog(RIGHT_IRSEN);
    
    printf("R= %d", value);
    return value;
}

/*
 * The each IR sensor will take in 30 value
 * readings and compute the average of those
 * values to determine a baseline for our
 * light value range.
 */
void setIRValAvg()
{
    int i = 0;
    int sum = 0;
    while(i < 30){
        sum += analog(LEFT_IRSEN);
        sum += analog(RIGHT_IRSEN);
        sleep(0.1);
        i++;
    }
    IR_VALUE = sum/60;
}

int calculateDelta()
{
    int delta = getRightSensorValue() - getLeftSensorValue();
    //printf("\nD=%d", delta);
    return delta;
}

void fuzzify(int delta)
{
    float calc_val = (float)delta/255.0;
    l_power = default_power;
    r_power = default_power;
    defuzzify(calc_val);

    
}

void defuzzify(float fuzz_val){
    //printf("\nR= %d, L= %d", right, left);
    if(fuzz_val < 0.0){
        fuzz_val = fuzz_val*100.0*4.0;
        turn(abs_val((int)fuzz_val), (int)fuzz_val);
        return;
    }
    if(fuzz_val > 0.0){
        fuzz_val = fuzz_val*100.0*4.0;
        turn((int)(fuzz_val*-1.0), (int)fuzz_val);
        return;
    }
    else
      turn(0, 0);
}

/*
 * Method to calculate absolute value
 * of an integer
 */
int abs_val(int value){
    if (value < 0){
        value = value * -1;
    }
    return value;
}

void main()
{
    
    //int i = 0;
    int delta = 0;
    while(1){
        while(!start_button());
        printf("\nStart!");
        //setIRValAvg();
        //printf("\nAvg= %d", IR_VALUE);
        //sleep(1.0);
        //range = IR_VALUE+15;
        //initial_delta = abs_val(calculateDelta());
        //printf("\nInit.D= %d", initial_delta);
        //sleep(1.0);
        while(!stop_button())
          {
            delta = calculateDelta();
            fuzzify(delta);
        }
        alloff();
    } 
}


