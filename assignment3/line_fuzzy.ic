/*
 * line_fuzzy.ic
 * Nick Rummel, Alex Medellin
 * CSC463-01
 * Fall 2017
 * Source code for Assignment 3
 * Detecting a line with 2 IR sensors
 * utilizing fuzzy logic.
 */

int LEFT_MOTOR = 1;                                         // port for left motor
int RIGHT_MOTOR = 3;                                        // port for right motor
int LEFT_IRSEN = 4;                                         // analog port for left IR sensor
int RIGHT_IRSEN = 3;          // analog port for right IR sensor
int IR_VALUE = 0;                                           // value to determine if on tape
int range = 0;
int initial_delta = 0;


/*
 * Function to move robot forward
 * with a specific amount of power 
 * for a specific length of time
 */
void forward(float time, int power)
{
    motor(LEFT_MOTOR, power);
    motor(RIGHT_MOTOR, power);
    sleep(time);
}

/*
 * Function to move robot backwards
 * with a specific amount of power 
 * for a specific length of time
 */
void backward(float time, int power)
{
    motor(LEFT_MOTOR, power);
    motor(RIGHT_MOTOR, power);
    sleep(time);
}

/*
 * Function to turn the robot
 * with a specific amount of power
 * going to each motor for a
 * specific length of time
 */
void turn(float time, int l_power, int r_power)
{
    motor(LEFT_MOTOR, l_power);
    motor(RIGHT_MOTOR, r_power);
    sleep(time);
}

/*
 * Function to stop the robot from
 * moving for a specified span of time
 */
void stop(float time)
{
    off(LEFT_MOTOR);
    off(RIGHT_MOTOR);
    sleep(time);
}

/*
 * Method to retrieve the left sensor value
 * from the robot's IR sensor
 * and print the value to the LCD screen.
 */
int getLeftSensorValue()
{
    int value;
    value = analog(LEFT_IRSEN);
    
    printf("L= %d\n", value);
    return value;
}

/*
 * Method to retrieve the right sensor value
 * from the robot's IR sensor
 * and print the value to the LCD screen.
 */
int getRightSensorValue()
{
    int value;
    value = analog(RIGHT_IRSEN);
    
    printf("R= %d\n", value);
    return value;
}

/*
 * The each IR sensor will take in 30 value
 * readings and compute the average of those
 * values to determine a baseline for our
 * light value range.
 */
void setIRValAvg()
{
    int i = 0;
    int sum = 0;
    while(i < 30){
        sum += analog(LEFT_IRSEN);
        sum += analog(RIGHT_IRSEN);
        sleep(0.1);
        i++;
    }
    IR_VALUE = sum/60;
}

int calculateDelta()
{
    int delta = analog(RIGHT_IRSEN) - analog(LEFT_IRSEN);
    printf("\nD=%d", delta);
    return delta;
}

void fuzzify(int delta)
{
    int calc_val = 0;
    // Negative Big
    if(delta < -1*range)
       {
           printf(" NB");
           calc_val = (int)((float)(abs_val(delta) - 100)*(1.25));
           defuzzify(calc_val, calc_val * -1);
           return;
       }
       // Negative Small
       if((delta < (-1)*IR_VALUE) && (delta >= -1*range))
         {
           printf(" NS");
           calc_val = (int)((float)delta *0.25);
           defuzzify(calc_val * -1, calc_val);
           return;
       }
       // Positive Small
       if((delta > IR_VALUE) && ((delta <= range)))
         {
           printf(" PS");
           calc_val = (int)((float)delta * 0.25);
           defuzzify(calc_val * -1, calc_val);
           return;
       }
       // Positive Big
       if(delta > range)
         {
           printf(" PB");
           calc_val = (int)((float)(abs_val(delta) - 100)*(1.25));
           defuzzify(calc_val * -1, calc_val);
           return;
       }
       // -IR_VALUE < x <IR_VALUE
       else
         {
           printf(" 1STD");
           calc_val = 75 - abs_val(delta);
           defuzzify(calc_val, calc_val);
           return;
       }
       }
       
       void defuzzify(int right, int left){
           printf("\nR= %d, L= %d", right, left);
           motor(RIGHT_MOTOR, right);
           motor(LEFT_MOTOR, left);
           sleep(0.5);
       }
       
       /*
 * Method to calculate absolute value
 * of an integer
 */
       int abs_val(int value){
           if (value < 0){
               value = value * -1;
           }
           return value;
       }
       
       void main()
       {
           
           //int i = 0;
           int delta = 0;
           while(1){
               while(!start_button());
               printf("\nStart!");
               setIRValAvg();
               printf("\nAvg= %d", IR_VALUE);
               sleep(1.0);
               range = IR_VALUE + 50;
               initial_delta = abs_val(calculateDelta());
        printf("\nInit.D= %d", initial_delta);
        sleep(1.0);
               while(!stop_button())
                 {
                   delta = calculateDelta();
                   fuzzify(delta);
               }
               alloff();
           } 
       }
       
       
