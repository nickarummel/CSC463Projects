/*
 * maze_fusion.ic
 * Nick Rummel, Alex Medellin
 * CSC463-01
 * Fall 2017
 * Source code for Assignment 4
 * Navigating a maze with two sensors:
 * - IR Sensor for determining how close
 * the robot is to a wall
 * - Photo Sensor for determining if the
 * robot is approaching the end of the maze
 * (a lamp is placed at the end of the maze)
 */

int LEFT_MOTOR = 1;                                                 // port for left motor
int RIGHT_MOTOR = 3;                                                // port for right motor

int L_IR_SEN = 4;                          // left IR sensor port
int R_IR_SEN = 5;             // right IR sensor port
int PHOTO_SEN = 3;                                                  // photo sensor port



/*
 * Function from textbook (turtle.ic)   
 * to move robot forwards
 */
void forward(float time)
{
    motor(LEFT_MOTOR, 50);
    motor(RIGHT_MOTOR, 50);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot backwards
 */
void backward(float time)
{
    motor(LEFT_MOTOR, -50);
    motor(RIGHT_MOTOR, -50);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot right
 */
void right(float time)
{
    motor(LEFT_MOTOR, 95);
    motor(RIGHT_MOTOR, -95);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot left
 */
void left(float time)
{
    motor(LEFT_MOTOR, -95);
    motor(RIGHT_MOTOR, 95);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to stop robot from moving
 */
void stop(float time)
{
    off(LEFT_MOTOR);
    off(RIGHT_MOTOR);
    sleep(time);
}

int getIRValue(int port)
{
    int val = 0;
    val = analog(port);
    printf("\n%d IR= %d ", port, val);
    return val;
}

int getPhotoValue()
{
    int val = 0;
    val = analog(PHOTO_SEN);
    printf("LITE= %d", val);
    return val;
}

void calculateMove()
{
    int l_ir = 0;
    int r_ir = 0;
    int photo = 0;
    
    l_ir = getIRValue(L_IR_SEN);
    r_ir = getIRValue(R_IR_SEN);
    photo = getPhotoValue();
    
    // no wall detected
    if(l_ir > 237 && r_ir > 240)
      {
        forward(0.0);
        return;
    }
    
    // wall detected (or extra light detected)
    else
      {
        // brighter light, so near end of maze
        if(photo < 50)
          {
            forward(0.0);
            return;
        }
        // low light, so wall found
        else
          {
            left(0.0);
            return;
        }
    }
}



void main()
{
    while(!start_button());
    printf("Start!");
    while(!stop_button())
      {
        calculateMove();
    }
    alloff();
}
