/*
 * maze_fusion.ic
 * Nick Rummel, Alex Medellin
 * CSC463-01
 * Fall 2017
 * Source code for Assignment 4
 * Navigating a maze with two sensors:
 * - IR Sensor for determining how close
 * the robot is to a wall
 * - Photo Sensor for determining if the
 * robot is approaching the end of the maze
 * (a lamp is placed at the end of the maze)
 */

int LEFT_MOTOR = 1;                                                 // port for left motor
int RIGHT_MOTOR = 3;                                                // port for right motor

int L_IR_SEN = 5;                                                   // left IR sensor port
int R_IR_SEN = 4;                         // right IR sensor port
int R_PHOTO_SEN = 3;                                                // right photo sensor port
int L_PHOTO_SEN = 6;            // left photo sensor port


/*
 * Function from textbook (turtle.ic)   
 * to move robot forwards
 */
void forward(float time)
{
    motor(LEFT_MOTOR, 65);
    motor(RIGHT_MOTOR, 65);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot backwards
 */
void backward(float time)
{
    motor(LEFT_MOTOR, -65);
    motor(RIGHT_MOTOR, -65);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot right
 */
void right(float time)
{
    motor(LEFT_MOTOR, 95);
    motor(RIGHT_MOTOR, -95);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot left
 */
void left(float time)
{
    motor(LEFT_MOTOR, -95);
    motor(RIGHT_MOTOR, 95);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to stop robot from moving
 */
void stop(float time)
{
    off(LEFT_MOTOR);
    off(RIGHT_MOTOR);
    sleep(time);
}

int getIRValue(int port)
{
    int val = 0;
    val = analog(port);
    //printf("\n%d IR= %d ", port, val);
    return val;
}

int getPhotoValue(int port)
{
    int val = 0;
    val = analog(port);
    //printf("LITE= %d", val);
    return val;
}

/*
 * Calculates a "true" value from the
 * photo sensor that will be added to
 * the original IR sensor values.
 */
int calculateNewIR(int photo)
{
    float calc = (float)photo / 225.0;
    calc = 1.0 - calc;
    return (int)(calc * 255.0 * 2.0);
}

void calculateMove()
{
    int l_ir = 0;
    int r_ir = 0;
    int l_photo = 0;
    int r_photo = 0;
    int add_true = 0;
    
    l_ir = getIRValue(L_IR_SEN);
    r_ir = getIRValue(R_IR_SEN);
    l_photo = getPhotoValue(L_PHOTO_SEN);
    r_photo = getPhotoValue(R_PHOTO_SEN);
    //printf("\nL= %d, R= %d", l_ir, r_ir);
    //printf("\nL= %d, R= %d",l_photo, r_photo);
    
    // brighter light, so near end of maze
    if(l_photo < 225 && r_photo < 225)
      {
        add_true = calculateNewIR(l_photo);
        l_ir = l_ir + add_true;
        //}
        //if(r_photo < 225)
        //{
        add_true = calculateNewIR(r_photo);
        r_ir = r_ir + add_true;
    }
    
    // no wall detected
    if(l_ir >= 235 && r_ir >= 235)
      {
        forward(0.0);
        return;
    }
    
    // wall detected (or extra light detected)
    else
      {
        
        // low light, so wall found
        if(l_ir > r_ir){
            if(seconds() <= 1.0){
                backward(1.0);
                left(2.2);
                forward(0.25);
            }
            else{
                backward(1.0);
                left(1.1);
                forward(0.25);
            }
            reset_system_time();
            return;
        }
        else{
            if(seconds() <= 1.0){
                backward(1.0);
                right(2.2);
                forward(0.25);
            }
            else{
                backward(1.0);
                right(1.1);
                forward(0.25);
            }
            reset_system_time();
            return;
        }
    }
}



void main()
{
    while(!start_button());
    printf("Start!");
    while(!stop_button())
      {
        calculateMove();
    }
    alloff();
}
