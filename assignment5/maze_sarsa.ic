/*
 * maze.ic
 * Nick Rummel, Alex Medellin
 * CSC463-01
 * Fall 2017
 * Source code for Assignment 2
 * Navigating a maze with touch sesnors
 * implementing the SARSA algorithm.
 * (actions and rewards)
 */

int LEFT_MOTOR = 1;                                               // port for left motor
int RIGHT_MOTOR = 3;                                              // port for right motor

int FRONT_L_TOUCH = 10;                                           // front left touch sensor port
int FRONT_R_TOUCH = 11;                                           // front right touch sensor port
int BACK_TOUCH = 12;                                              // back touch sensor port

float reward[7];												  // stores reward values for each action

int count_action[7];                                              // stores the number of times an action is performed

/*
 * Moves robot forward for a pre-set amount
 * of time while a sensor is not pressed.
 */
void forward(float time)
{
    float cur_time = seconds();
    motor(LEFT_MOTOR, 50);
    motor(RIGHT_MOTOR, 50);
    while(seconds() < cur_time + time)
      {
        if(digital(FRONT_L_TOUCH) || digital(FRONT_R_TOUCH))
          {
            alloff();
            return;
        }
    }
}

/*
 * Moves robot backwards for a pre-set amount
 * of time while the back sensor is not pressed.
 */
void backward(float time)
{
    float cur_time = seconds();
    motor(LEFT_MOTOR, -50);
    motor(RIGHT_MOTOR, -50);
    while(seconds() < cur_time + time)
      {
        if(digital(BACK_TOUCH))
          {
            alloff();
            return;
        }
    }
}

/*
 * Moves robot right for a pre-set amount
 * of time while a sensor is not pressed.
 */
void right(float time)
{
    float cur_time = seconds();
    motor(LEFT_MOTOR, 85);
    motor(RIGHT_MOTOR, -85);
    while(seconds() < cur_time + time)
      {
        if(digital(FRONT_L_TOUCH) || digital(FRONT_R_TOUCH) || digital(BACK_TOUCH))
          {
            alloff();
            return;
        }
    }
}

/*
 * Moves robot left for a pre-set amount
 * of time while a sensor is not pressed.
 */
void left(float time)
{
    float cur_time = seconds();
    motor(LEFT_MOTOR, -85);
    motor(RIGHT_MOTOR, 85);
    while(seconds() < cur_time + time)
      {
        if(digital(FRONT_L_TOUCH) || digital(FRONT_R_TOUCH) || digital(BACK_TOUCH))
          {
            alloff();
            return;
        }
    }
}

/*
 * Determines if both touch sensors are pressed.
 * A sleep timer is used briefly in case a 
 * one sensor is pressed in before the other.
 * Returns 1 if both sensors are pressed, otherwise 0.
 */
int both_touch_press()
{
    if(digital(FRONT_L_TOUCH))
    {
        sleep(0.1);
        if(digital(FRONT_R_TOUCH))
        {
            return 1;
        }
    }
    if(digital(FRONT_R_TOUCH))
    {
        sleep(0.1);
        if(digital(FRONT_L_TOUCH))
        {
            return 1;
        }
    }
    else
      return 0;
}

/*
 * Takes system time and creates a "random" number
 */ 
int randomNumber(int numOfActions)
{
    return ((int) seconds()) % numOfActions;
}

/*
 * Selects a random action or determines the action
 * with the current highest reward. The chosen action
 * is then executed.
 */
int determineAction(int iteration)
{
    int action;
    if(iteration < 3)
    {
        action = randomNumber(7);
    }
    else
    {
        action = findLargestReward();
    }
    
    // determine which action was chosen
    // Action #0: Turn Left at 45 Degrees
    if(action == 0)
    {
        printf("\n Left 45, ");
        backward(0.5);
        left(0.6);
        count_action[action]++;
        return action;
    }
    //Action #1: Turn Left at 90 Degrees
    if(action == 1)
    {
        printf("\n Left 90, ");
        backward(0.5);
        left(1.2);
        count_action[action]++;
        return action;
    }
    //Action #2: Turn Right at 45 Degrees
    if(action == 2)
    {
        printf("\n Right 45, ");
        backward(0.5);
        right(0.6);
        count_action[action]++;
        return action;
    }
    //Action #3: Turn Right at 90 Degrees
    if(action == 3)
    {
        printf("\n Right 90, ");
        backward(0.5);
        right(1.2);
        count_action[action]++;
        return action;
    }
    //Action #4: Turn 180 Degrees
    if(action == 4)
    {
        printf("\nTurn 180, ");
        backward(0.5);
        left(2.3);
        count_action[action]++;
        return action;
    }
    //Action #5: Move forward
    if(action == 5)
    {
        printf("\n Forward, ");
        forward(1.0);
        count_action[action]++;
        return action;
    }
    //Action #6: Move backwards
    if(action == 6)
    {
        printf("\n Backwards, ");
        backward(1.0);
        count_action[action]++;
        return action;
    }
    count_action[action]++;
    return action;
}

/*
 * Calculates the reward after an action is completed.
 * The reward is stored for further action selection.
 */
void calcReward(int action)
{
    float sum = 0.0;
    if(both_touch_press())
      sum += -0.5;
    else
      sum += 0.5;
    
    if(digital(FRONT_L_TOUCH))
      sum += -0.3;
    else
      sum += 0.3;
    
    if(digital(FRONT_R_TOUCH))
      sum += -0.3;
    else
      sum += 0.3;
    
    if(digital(BACK_TOUCH))
      sum += -0.2;
    else
      sum += 0.2;
    
    forward(4.0);
    
    if(both_touch_press())
      sum += -0.3;
    else
      sum += 0.3;
    
    if(digital(FRONT_L_TOUCH))
      sum += -0.2;
    else
      sum += 0.2;
    
    if(digital(FRONT_R_TOUCH))
      sum += -0.2;
    else
      sum += 0.2;
    
    if(digital(BACK_TOUCH))
      sum += -0.1;
    else
      sum += 0.1;
    
    if(count_action[action] >=2)
    {
        sum += -6.0;
        count_action[action] = 0;
    }
    
    reward[action] += sum;
    
    printf("reward= %f", reward[action]);
    
    
}

/*
 * Searches the rewards array to determine
 * action has the greatest reward currently
 */
int findLargestReward()
{
    int i;
    int large_action = 0;
    for(i = 0; i < 7; i++)
    {
        if(i == 0)
          large_action = i;
        else
        {
            if(reward[i] > reward[large_action])
              large_action = i;
        }
    }
    return large_action;
}

void main()
{
    int i;
    int action = 0;
    for(i = 0; i < 7;i++)
    {
        reward[i] = 0.0;
        count_action[i] = 0;
    }
    i = 0;
    while(!start_button());
    printf("Start!");
    while(!stop_button())
    {
        if(digital(FRONT_L_TOUCH) || digital(FRONT_R_TOUCH) || digital(BACK_TOUCH))
        {
            action = determineAction(i);
            calcReward(action);
            i++;
        }
        else
        {
            forward(0.0);
        }
    }
    alloff();
    
    
}
