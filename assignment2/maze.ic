/*
 * maze.ic
 * Nick Rummel, Alex Medellin
 * CSC463-01
 * Fall 2017
 * Source code for Assignment 2
 * Navigating a maze with a touch sensor
 *
 * Algorithm is utilizing prediction based
 * on a history of successful previous
 * turns, where:
 * -1 = left prediction; go left
 *  0 = no prediction; go left by default
 *  1 = right prediction; go right
 */

int LEFT_MOTOR = 1;                                    // port for left motor
int RIGHT_MOTOR = 3;                                   // port for right motor

int L_TOUCH = 10;                                      // left touch sensor port
int R_TOUCH = 11;                                      // right touch sensor port

int size = 5;                                          // number of turns stored that were
// previously taken

int history[5] = {0,0,0,0,0};                                     // array of values to determine
// previous turns taken


/*
 * Function from textbook (turtle.ic)   
 * to move robot forwards
 */
void forward(float time)
{
    motor(LEFT_MOTOR, 60);
    motor(RIGHT_MOTOR, 60);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot backwards
 */
void backward(float time)
{
    motor(LEFT_MOTOR, -50);
    motor(RIGHT_MOTOR, -50);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot right
 */
void right(float time)
{
    motor(LEFT_MOTOR, 85);
    motor(RIGHT_MOTOR, -85);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to move robot left
 */
void left(float time)
{
    motor(LEFT_MOTOR, -85);
    motor(RIGHT_MOTOR, 85);
    sleep(time);
}

/*
 * Function from textbook (turtle.ic)
 * to stop robot from moving
 */
void stop(float time)
{
    off(LEFT_MOTOR);
    off(RIGHT_MOTOR);
    sleep(time);
}

/*
 * Initializes each index to 0,
 * meaning that there was no turn
 * recorded.
 */
void initialize_history()
{
    int i;
    for(i = 0; i < size; i++)
      history[i] = 0;
}

/*
 * Moves the most recent history
 * record and moves it to index 0.
 * Then, all indices after 0 are
 * reset to the value 0.
 */
void reset_history()
{
    int i;
    history[0] = history[size - 1];
    for(i = 0; i < size; i++)
      history[i] = 0;
}

/*
 * Moves robot backwards, then to the left,
 * then forward, then stops. This will
 * allow the robot to determine if a sensor
 * was pressed and turn was successful.
 */
void try_left()
{
    backward(1.1);
    left(1.23);
    forward(1.0);
    stop(0.0);
}

/*
 * Moves robot backwards, then to the right,
 * then forward, then stops. This will
 * allow the robot to determine if a sensor
 * was pressed and turn was successful.
 */
void try_right()
{
    backward(1.1);
    right(1.23);
    forward(1.0);
    stop(0.0);
}

/*
 * Determines if both touch sensors are pressed.
 * A sleep timer is used briefly in case a 
 * one sensor is pressed in before the other.
 * Returns 1 if both sensors are pressed, otherwise 0.
 */
int both_touch_press()
{
    if(digital(L_TOUCH))
      {
        sleep(0.1);
        if(digital(R_TOUCH))
          {
            //spot to add sleep()
            return 1;
        }
    }
    if(digital(R_TOUCH))
      {
        sleep(0.1);
        if(digital(L_TOUCH))
          {
            //spot to add sleep()
            return 1;
        }
    }
    else
      return 0;
}

void main()
{
    int i = 0;
    //int r_val = 0;
    //int l_val = 0;
    while(!start_button());
    printf("Start!");
    while(1){
        if(stop_button())
          {
            stop(0.0);
            break;
        }
        if(!stop_button())
          {
            //l_val = digital(L_TOUCH);
            //r_val = digital(R_TOUCH);
            if(digital(L_TOUCH) == 0 && digital(R_TOUCH) == 0)                       // touch sensors not pressed
              {
                printf("Forward!\n");
                forward(0.0);
            }
            else                                                                // touch sensors were pressed
              {
                if(i == size-1)                                                // if the history is full
                  {
                    reset_history();                                           // see function description
                    i = 0;                                                        // set index back to 0
                }
                /*                 if((digital(L_TOUCH) == 1 && digital(R_TOUCH) == 0) )    // detected left, go right
                  {
                    printf("T-Left: Right!\n");
                    backward(1.0);
                    right(1.2);
                }
                if((digital(L_TOUCH) == 0 && digital(R_TOUCH) == 1))      // detected right, go left
                  {
                    printf("T-Right: Left!\n");
                    backward(1.0);
                    left(1.2);
                } */
                else                 // both sensors pressed
                  {
                    /* default - try left first */
                    if(history[i] == 0)
                      {
                        try_left();
                        if(both_touch_press())          // check if sensors are pressed
                          {
                            try_right();
                            if(!both_touch_press())         // check that sensors are not pressed
                              {
                                printf("Success: Right\n");
                                history[i+1] = 1;         // success! record right for history
                            } 
                        }
                        else
                          {
                            printf("Success: Left\n");
                            history[i+1] = -1;          // success! record left for history
                        }
                        
                    }
                    
                    else
                      {
                        /* right last time (1), so try right first */
                        if(history[i] > 0)
                          {
                            try_right();
                            if(both_touch_press())          // check if sensors are pressed
                              {
                                try_left();
                                if(!both_touch_press())         // check that sensors are not pressed
                                  {
                                    printf("Success: Left\n");
                                    history[i+1] = -1;         // success! record left for history
                                }
                            }
                            else
                              {
                                printf("Success: Right\n");
                                history[i+1] = 1;          // success! record right for history
                            }
                            
                            /* left last time (-1), so try left first */
                            if(history[i] < 0)
                              {
                                try_left();
                                if(both_touch_press())                    // check if sensors are pressed
                                  {
                                    try_right();
                                    if(!both_touch_press())               // check that sensors are not pressed
                                      {
                                        printf("Success: Right\n");
                                        history[i+1] = 1;                 // success! record right for history
                                    } 
                                }
                                else
                                  {
                                    printf("Success: Left\n");
                                    history[i+1] = -1;                    // success! record left for history
                                }
                            }
                        } 
                    }
                    i++;                                                  // only increment if a sensor was pressed
                } 
                
            } 
        }
    }
}
